{"version":3,"sources":["assests/bethel.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","countdown","timeDiff","Date","getTime","timeDays","Math","floor","timeHours","timeMinutes","timeSeconds","useEffect","setInterval","className","class","src","bethel","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wJAAe,MAA0B,mC,OC0E1BA,EAtED,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAU,WACd,IAEMC,EAFU,IAAIC,KAAK,+BAA+BC,WAC1C,IAAID,MAAOC,UAInBP,EAAUE,IACVJ,EAAQE,KACRJ,EAAOE,MAETU,EAAWC,KAAKC,MAAML,EAAWT,GACjCe,EAAYF,KAAKC,MAAOL,EAAWT,EAAQE,GAC3Cc,EAAaH,KAAKC,MAAOL,EAAWP,EAASE,GAC7Ca,EAAaJ,KAAKC,MAAOL,EAAWL,EARxB,KAUhBW,EAAYA,EAAW,GAAI,IAAMA,EAAYA,EAC7CC,EAAcA,EAAa,GAAI,IAAMA,EAAcA,EACnDC,EAAcA,EAAa,GAAI,IAAMA,EAAcA,EAEnDhB,EAAQW,GACRT,EAASY,GACTV,EAAWW,GACXT,EAAWU,IASf,OALEC,qBAAU,WACNC,YAAYX,EAAW,QAK3B,qBAAKY,UAAU,6DAAf,SAEG,sBAAKA,UAAU,yGAAf,UACK,gCAAM,qBAAKC,MAAM,8EAAX,oBACN,qBAAKC,IAAKC,EAAQC,IAAI,GAAGH,MAAM,4CAGpC,yBAASD,UAAU,YAAnB,SAEK,sBAAKA,UAAU,YAAf,UACI,oCACE,4BAAIpB,IACJ,yCAEF,oCACE,4BAAIE,IACJ,0CAEF,oCACE,4BAAIE,IACJ,4CAEF,oCACE,4BAAIE,IACJ,uDCtDHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0532a003.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bethel.bb4a89df.png\";","/* eslint-disable no-unused-vars */\r\nimport {useState, useEffect} from 'react';\r\nimport bethel from './assests/bethel.png';\r\n//import team from './assests/team.png';\r\n   const App =()=> {\r\n    const [days, setDays] = useState(10)\r\n    const [hours, setHours] = useState(10)\r\n    const [minutes, setMinutes] = useState(10)\r\n    const [seconds, setSeconds] = useState(10)\r\n  \r\n    const countdown=()=>{\r\n      const endDate = new Date(\"September 25, 2022 00:00:00\").getTime()\r\n      const today = new Date().getTime()\r\n      const timeDiff = endDate - today\r\n  \r\n      const seconds = 1000\r\n      const minutes = seconds*60\r\n      const hours = minutes*60\r\n      const days = hours*24\r\n  \r\n      let timeDays = Math.floor(timeDiff / days)\r\n      let timeHours = Math.floor((timeDiff % days) / hours)\r\n      let timeMinutes= Math.floor((timeDiff % hours) / minutes)\r\n      let timeSeconds= Math.floor((timeDiff % minutes) / seconds)\r\n  \r\n      timeHours = timeHours< 10? \"0\" + timeHours : timeHours\r\n      timeMinutes = timeMinutes< 10? \"0\" + timeMinutes : timeMinutes\r\n      timeSeconds = timeSeconds< 10? \"0\" + timeSeconds : timeSeconds\r\n  \r\n      setDays(timeDays)\r\n      setHours(timeHours)\r\n      setMinutes(timeMinutes)\r\n      setSeconds(timeSeconds)\r\n  \r\n    }\r\n  \r\n    useEffect(() => {\r\n        setInterval(countdown, 1000)\r\n    })\r\n  \r\n  \r\n  return (\r\n    <div className='min-h-screen bg-gray-100 text-gray-900 flex justify-center'>\r\n   \r\n       <div className='screen1 max-w-screen-lg m-10 sm:m-12 bg-white shadow  flex justify-center flex-1 rounded-3xl shadow-xl'>\r\n            <div ><div class=\"absolute w-full -my-64 text-xl xl:text-xl font-semibold  text-red-700 ml-16\">BETHEL</div>\r\n            <img src={bethel} alt=\"\" class=\"ml-5 -my-64  h-8 w-8 object-contain \" />\r\n       </div>\r\n     \r\n       <section className=\"container\">\r\n            {/*<h1>React Count Down Timer</h1>*/}\r\n            <div className=\"countdown\">\r\n                <article>\r\n                  <p>{days}</p>\r\n                  <h3>Days</h3>\r\n                </article>\r\n                <article>\r\n                  <p>{hours}</p>\r\n                  <h3>Hours</h3>\r\n                </article>\r\n                <article>\r\n                  <p>{minutes}</p>\r\n                  <h3>Minutes</h3>\r\n                </article>\r\n                <article>\r\n                  <p>{seconds}</p>\r\n                  <h3>Seconds</h3>\r\n                </article>\r\n            </div>\r\n        </section>\r\n      </div>\r\n  </div>\r\n  );\r\n};\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}